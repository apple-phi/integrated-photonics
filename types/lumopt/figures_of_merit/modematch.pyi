from _typeshed import Incomplete
from lumopt.utilities.wavelengths import Wavelengths as Wavelengths

def is_int(x): ...

class ModeMatch:
    monitor_name: Incomplete
    mode_expansion_monitor_name: Incomplete
    adjoint_source_name: Incomplete
    mode_number: Incomplete
    target_fom: Incomplete
    rotation_angle_theta: Incomplete
    rotation_angle_phi: Incomplete
    rotation_offset: Incomplete
    direction: Incomplete
    multi_freq_src: Incomplete
    target_T_fwd: Incomplete
    target_T_fwd_weights: Incomplete
    norm_p: Incomplete
    def __init__(self, monitor_name, mode_number, direction, multi_freq_src: bool = False, target_T_fwd=..., norm_p: int = 1, target_fom: int = 0, target_T_fwd_weights=..., rotation_angle_theta: int = 0, rotation_angle_phi: int = 0, rotation_offset: int = 0) -> None: ...
    def initialize(self, sim) -> None: ...
    def make_forward_sim(self, sim) -> None: ...
    def make_adjoint_sim(self, sim) -> None: ...
    def can_make_adjoint_sim(self, sim): ...
    def check_monitor_alignment(self, sim) -> None: ...
    @staticmethod
    def add_mode_expansion_monitor(sim, monitor_name, mode_expansion_monitor_name, mode, rotation_angle_theta, rotation_angle_phi, rotation_offset) -> None: ...
    @staticmethod
    def cross_section_monitor_props(monitor_type): ...
    T_fwd_vs_wavelength: Incomplete
    phase_prefactors: Incomplete
    def get_fom(self, sim): ...
    def get_adjoint_field_scaling(self, sim): ...
    @staticmethod
    def get_wavelengths(sim): ...
    @staticmethod
    def get_transmission_coefficient(sim, direction, monitor_name, mode_exp_monitor_name): ...
    @staticmethod
    def get_source_power(sim, wavelengths): ...
    @staticmethod
    def fom_wavelength_integral(T_fwd_vs_wavelength, wavelengths, target_T_fwd, norm_p, target_T_fwd_weights): ...
    @staticmethod
    def add_mode_source(sim, monitor_name, source_name, direction, mode, multi_freq_src, rotation_angle_theta, rotation_angle_phi, rotation_offset) -> None: ...
    def fom_gradient_wavelength_integral(self, T_fwd_partial_derivs_vs_wl, wl): ...
    def fom_gradient_wavelength_integral_on_cad(self, sim, grad_var_name, wl): ...
    @staticmethod
    def fom_gradient_wavelength_integral_impl(T_fwd_vs_wavelength, T_fwd_partial_derivs_vs_wl, target_T_fwd_vs_wavelength, wl, norm_p, target_T_fwd_weights): ...
