from _typeshed import Incomplete
from lumopt.geometries.geometry import Geometry as Geometry
from lumopt.utilities.edge import Edge as Edge
from lumopt.utilities.materials import Material as Material

class Polygon(Geometry):
    deps_num_threads: Incomplete
    points: Incomplete
    z: Incomplete
    depth: Incomplete
    edge_precision: Incomplete
    eps_out: Incomplete
    eps_in: Incomplete
    gradients: Incomplete
    hash: Incomplete
    def __init__(self, points, z, depth, eps_out, eps_in, edge_precision, deps_num_threads: int = 1) -> None: ...
    edges: Incomplete
    def make_edges(self) -> None: ...
    def use_interpolation(self): ...
    def calculate_gradients(self, gradient_fields): ...
    def update_geometry(self, points_linear, sim: Incomplete | None = None) -> None: ...
    def get_current_params(self): ...
    def add_geo(self, sim, params, only_update) -> None: ...
    def plot(self, ax): ...

class FunctionDefinedPolygon(Polygon):
    func: Incomplete
    current_params: Incomplete
    bounds: Incomplete
    dx: Incomplete
    params_hist: Incomplete
    def __init__(self, func, initial_params, bounds, z, depth, eps_out, eps_in, edge_precision: int = 5, dx: float = 1e-10, deps_num_threads: int = 1) -> None: ...
    points: Incomplete
    def update_geometry(self, params, sim: Incomplete | None = None) -> None: ...
    def get_current_params(self): ...
    def calculate_gradients(self, gradient_fields): ...
    def add_poly_script(self, sim, points, only_update) -> None: ...
    def add_geo(self, sim, params, only_update) -> None: ...
