from _typeshed import Incomplete

class Geometry:
    self_update: bool
    unfold_symmetry: bool
    use_central_differences: bool
    deps_num_threads: int
    obj_bounds: Incomplete
    def use_interpolation(self): ...
    def check_license_requirements(self, sim): ...
    geometries: Incomplete
    operation: Incomplete
    bounds: Incomplete
    dx: Incomplete
    def __init__(self, geometries, operation) -> None: ...
    def __add__(self, other): ...
    def __mul__(self, other): ...
    def add_geo(self, sim, params, only_update) -> None: ...
    opt: Incomplete
    def initialize(self, wavelengths, opt) -> None: ...
    def update_geometry(self, params, sim: Incomplete | None = None) -> None: ...
    def calculate_gradients(self, gradient_fields): ...
    def get_current_params(self): ...
    def plot(self, *args): ...
    def add_geo(self, sim, params, only_update) -> None: ...
    @staticmethod
    def get_eps_from_index_monitor(fdtd, eps_result_name, get_bounds: Incomplete | None = None, param_dict: Incomplete | None = None, delta: Incomplete | None = None, param_scaling: Incomplete | None = None, monitor_name: str = 'opt_fields') -> None: ...
    def d_eps_on_cad_parallel(self, sim) -> None: ...
    def d_eps_on_cad_serial(self, sim) -> None: ...
    def d_eps_on_cad(self, sim) -> None: ...
